Wanring: Some of these may be incorrect as they are untested!!!

List of arm hex values by HorridModz (User123456789#6424).
These hex values are copy and pasted from several forums. I forgot who made each one, so credit is missing. Very sorry. I believe one was by Slice-Cast on polarmods.com.

List 1:
32bit



02 00 A0 E3 1E FF 2F E1 = Number 2

07 00 A0 E3 1E FF 2F E1 = Number 7

0A 00 A0 E3 1E FF 2F E1 = Number 10

0F 00 A0 E3 1E FF 2F E1 = Number 15

10 00 A0 E3 1E FF 2F E1 = Number 16

11 00 A0 E3 1E FF 2F E1 = Number 17

37 00 A0 E3 1E FF 2F E1 = 50

FF 00 A0 E3 1E FF 2F E1 = 255

12 07 80 E3 1E FF 2F E1 = VALUE OF 12 Million or It can be used for health/ammo/armour/damage

DC 0F 00 E3 1E FF 2F E1 = VALUE 4060

DC OF OF E3 1E FF 2F E1 = VALUE 120000

01 0A A0 E3 1E FF 2F E1 = 1000

01 08 A0 E3 1E FF 2F E1 = 10000

01 02 A0 E3 1E FF 2F E1 = 10000000

C2 0A 64 60 00 00 00 02 = Speed Hack

01 04 A0 E3 1E FF 2F E1 = 1000000

0E 00 A0 E3 1E FF 2F E1 = Fire Rate

00 00 40 E3 1E FF 2F E1 = 0 for float

80 0F 43 E3 1E FF 2F E1 = 1 for float

00 00 44 E3 1E FF 2F E1 = 2 for float

40 00 44 E3 1E FF 2E E1 = 3 for float

80 00 44 E3 1E FF 2E E1 = 4 for float

A0 00 44 E3 1E FF 2E E1 = 5 for float

20 01 04 E3 1E FF 2F E1 = 10 for float

20 02 44 E3 1E FF 2F E1 = FLOAT/40

51 00 44 E3 1E FF 2F E1 = 69 for float

C6 02 44 E3 1E FF 2F E1 = FLOAT/99

C7 02 44 E3 1F FF 2F E1 = 99.9 for float

C8 02 44 E3 1E FF 2F E1 = 100 for float

16 03 44 E3 1E FF 2F E1 = 150 for float

48 03 44 E3 1E FF 2F E1 = 200 for float

96 03 44 E3 1E FF 2F E1 = 300 for float

C8 03 44 E3 1E FF 2F E1 = 400 for float

FA 03 04 E3 1E FF 2F E1 = 500 for float

7A 04 04 E3 1E FF 2F E1 = FLOAT FREEZE/999

79 04 44 E3 1E FF 2F E1 = 999.9 for float

7A 04 44 E3 1E FF 2F E1 = 1000 for float

FA 04 04 E3 1E FF 2F E1 = 2000 max amount for float

0F 07 02 E3 1E FF 2F E1 = 9,999

74 70 80 E5 1E FF 2F E1 = for Strings [Coins, Gems]

E7 03 00 E3 1E FF 2F E1 = Freeze int

7A 04 04 E3 1E FF 2F E1 = Freeze float

C8 02 44 E3 1E FF 2F E1 = FLOAT/100

00 F0 20 E3 1E FF 2F E1 = NOP CODE

3B 05 44 E3 1E FF 2F E1 = 3000 for double

7A 05 44 E3 1E FF 2F E1 = 4000 for double

84 09 45 E3 1E FF 2F E1 = 5984 for double

FA 05 44 E3 1E FF 2F E1 = 8000 for double

1C 06 44 E3 1E FF 2F E1 = 9999 for double

1C 06 44 E3 1E FF 2F E1 = 9984 for double

1D 06 44 E3 1E FF 2F E1 = 10048 for double

C3 07 44 E3 1E FF 2F E1 = 99840 for double

AA 08 44 E3 1E FF 2F E1 = 348160 for double
BE 0C 44 E3 1E FF 2F E1 = 99614720 for double

6E 0E 44 E3 1E FF 2F E1 = 998244352 for double

BA 01 45 E3 1E FF 2F E1 = 99857989632 for double

FF FF = Value of 65535 = Highest value 4 character hex code

01 00 A0 E3 1E FF 2F E1 = VALUE 1 Also = True used for bool

00 00 A0 E3 1E FF 2F E1 = Value 0 Also = False used for bool

12 07 A0 E3 1E FF 2F E1 = high value for money

64bit:



20 00 80 D2 C0 03 5F D6 = VALUE 1 Also = True used for bool

00 00 80 D2 C0 03 5F D6 = Value 0 Also = False used for bool

00 E0 AF D2 C0 03 5F D6 = high value for money

1F 20 03 D5 = NOP [skip/ignore]

List 2:

This is only for int32 or public int/private int methods

For High Values: (useful for golds, diamonds or resources)
Code:
HEX CODE:
02 01 E0 E3 1E FF 2F E1 is equals to 2,147,483,648


ARM:
mvn r0, #0x80000000
bx lr
Another value for 2 billion:
Code:
HEX CODE:
7F 04 E0 E3 1E FF 2F E1 is equals to 2,130,706,432


ARM:
mvn r0, #0x7f000000
bx lr
Value for 133 million: (some games will make the value into a negative value when it reached the max, such as using the above 2 billion)
Code:
HEX CODE:
7F 06 A0 E3 1E FF 2F E1 is equals to 133,169,152


ARM:
mov r0, #0x7f00000
bx lr
Value for 9,999: (useful for bullets, power ups etc.)
Code:
HEX CODE:
0F 07 02 E3 1E FF 2F E1 is equals to 9,999


ARM:
movw r0, #0x270f
bx lr

Those values above will work for sure. It will and I always use those :-)

--------------------------------------------

Now, this is only for float value or public float/private float methods

For now, this might be the maximum value for floats:
Code:
HEX CODE:
FA 04 44 E3 1E FF 2F E1 is equals to 2,000


ARM:
movt r0, #0x44fa
bx lr
--------------------------------------------

Now, for public long methods

If you want to return a high value such as 999,999,999: (useful for golds, etc.)
Code:
HEX CODE:
FF 09 0C E3 00 10 A0 E3 9A 0B 43 E3 1E FF 2F E1 is equals to 999,999,999


ARM:
movw r0, #0xc9ff
mov r1, #0
movt r0, #0x3b9a
bx lr
Credits to AndnixSH for the long hex code

--------------------------------------------

Now, for float methods (public float/ 0f)
Code:
return 2.000xxxxxx
00 10 44 E3 1E FF 2F E1

return 131072.070218983
00 11 44 E3 1E FF 2F E1

return 8.5c
00 12 44 E3 1E FF 2F E1
Credits to timmyyy19977 for the float hex code

--------------------------------------------

Now, for double methods (public double/ 0.0)
Code:
return 1.38035000899035E+70
80 1e 44 E3 1E FF 2F E1

return 3.71997665142281E-310
7A 14 04 E3 1E FF 2F E1


List 3:
32bit:
1 = 0000803F
2 = 00000040
4 = 00008040
8 = 00000041
16 = 00008041
32 = 00000042
64 = 00008042
128 = 00000043
256 = 00008043
512 = 00000044
1024 = 00008044
2048 = 00000045
4096 = 00008045
8192 = 00000046
16384 = 00008046
32768 = 00000047
65536 = 00008047
131072 = 00000048
262144 = 00008048
524288 = 00000049
1048576 = 00008049
2097152 = 0000004A
4194304 = 0000804A
8388608 = 0000004B
16777216 = 0000804B
33554432 = 0000004C
67108864 = 0000804C
134217728 = 0000004D
268435456 = 0000804D
536870912 = 0000004E
1073741824 = 0000804E
-2147483648 = 000000CF

List 4:

64Bit:

-- 80 02 80 52 C0 03 5F D6 = 20
-- 00 F9 95 52 C0 03 5F D6 = 45000
-- A0 00 80 52 C0 03 5F D6 = 5

List 6:
64bit:
20 00 80 D2 C0 03 5F D6 - true
00 00 80 D2 C0 03 5F D6 - false

List 7 (BY ME!):
64bit:
E0 83 00 32 - 65537 UNSAFE FOR PIXEL GUN 3D
00 4C 9D 52 - 60000 UNSAFE FOR PIXEL GUN 3D
00 6A 98 52 - 50000 UNSAFE FOR PIXEL GUN 3D
E0 69 98 52 - 49999 UNSAFE FOR PIXEL GUN 3D
60 69 98 52 - 49995 UNSAFE FOR PIXEL GUN 3D
60 FA 95 52 - 45011 UNSAFE FOR PIXEL GUN 3D
00 F9 95 52 - 45000
E0 F8 95 52 - 45999
60 F8 95 52 - 44995
C0 F7 95 52 - 44990
00 88 93 52 - 40000
E0 87 93 52 - 39999
60 87 93 52 - 39995
00 17 91 52 - 35000
00 A6 8E 52 - 30000
E0 A5 8E 52 - 2999
60 A5 8E 52 - 29995
00 35 8C 52 - 25000
00 C4 89 52 - 20000
E0 C3 89 52 - 19999
60 C3 89 52 - 19995
00 53 87 52 - 15000
80 1A 86 52 - 12500
00 E2 84 52 - 10000
E0 E1 84 52 - 9999
60 E1 84 52 - 9995
00 6B 83 52 - 7000
00 71 82 52 - 5000
E0 70 82 52 - 4999
60 70 82 52 - 4995
00 F4 81 52 - 4000
E0 F3 81 52 - 3999
60 F3 81 52 - 3995
00 77 81 52 - 3500
E0 76 81 52 - 2999
80 38 81 52 - 2500
60 38 81 52 - 2499
E0 37 81 52 - 2495
00 FA 80 52 - 2000
E0 F9 80 52 - 1999
80 BB 80 52 - 1500
40 9C 80 52 - 1250
00 7D 80 52 - 1000
E0 7C 80 52 - 999
60 7C 80 52 - 995
00 64 80 52 - 800
C0 5D 80 52 - 750
00 4B 80 52 - 600
80 3E 80 52 - 500
60 3E 80 52 - 499
E0 3D 80 52 - 495
00 32 80 52 - 400
E0 31 80 52 - 399
80 25 80 52 - 300
E0 1F 80 D2 - 255
40 1F 80 52 - 250
20 1F 80 52 - 249
00 19 80 52 - 200
E0 18 80 52 - 199
E0 01 80 52 - 150
00 0F 80 52 - 120
80 0C 80 52 - 100
60 0C 80 52 - 99
40 0B 80 52 - 90
60 09 80 52 - 75
40 09 80 52 - 74
40 06 80 52 - 50
20 06 80 52 - 49
A0 05 80 52 - 45
80 05 80 52 - 44
00 05 80 52 - 40
60 04 80 52 - 35
C0 03 80 52 - 30
A0 03 80 52 - 29
20 03 80 52 - 25
00 03 80 52 - 24
80 02 80 52 - 20
60 02 80 52 - 19
E0 01 80 52 - 15
80 01 80 52 - 12
60 01 80 52 - 11
40 01 80 52 - 10
20 01 80 52 - 9
00 01 80 52 - 8
A0 00 80 52 - 5
80 00 80 52 - 4
60 00 80 52 - 3
40 00 80 52 - 2
20 00 80 D2 - 1
00 00 80 D2 - 0
20 00 80 D2 - True
00 00 80 D2 - False
C0 03 5F D6 - Ret (Comes after everything!)







Make your own:
64bit:
https://armconverter.com/
mov w0, #45000
ret
Put the number u desire after the #
Then convert to hex with arm to hex convert
You can also change w to x and use decimal to hex converter and put hex after #

32bit:
I made the simple IEEE 754 converter tool for ARM AndnixSH/IEEE-754-Converter

Type any float value you want and get the hexadecimal for Little-endian
(You can also use decimal to hex convert)
movt r0, #0xHEX HERE
bx lr -- This is for return
Then use ARM To HEX Converter Online to convert ARM instruction to hex bytes

Example number 1 is 0000803F (Little-endian), return like this

Code:
MOV R0, 0xHEX HERE
